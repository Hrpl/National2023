@page "/task"
@inject IJSRuntime JSRuntime

<div class="bg-light d-flex flex-column h-100" style="border-radius: 8px">
    <div class="d-flex justify-content-between">
        <h3 class="m-3">Список задач</h3>
        <div class="col-4 row">
            <input class="form-label m-3 col-9" style="border-radius: 8px;" placeholder="Введите текст для поиска" />
            <button class="p-0 m-2 btn col-1" onclick="@ResetButton">
                <h4 class="bi m-0 bi-arrow-counterclockwise"></h4>
            </button>
        </div>
        
    </div>

    <div class="d-flex justify-content-between h-100">
        <div class="my-2 flex-grow-1 d-flex flex-column h-100">
            @if (SortedTask != null)
            {
                @foreach (var item in SortedTask)
                {
                    <TaskElement Item="item" EventCallback="@(() => On(item))"></TaskElement>
                }
            }
            <button class="border-0 m-2 bg-light justify-content-end align-self-end" style="color: orange;">
                <h2 class="bi bi-plus-circle-fill"></h2>
            </button>
        </div>

       
        <div class="flex-grow-1 border-1 h-100" style="display: none" id="taskInformation">
            @if (TempTask != null)
            {
                <TaskInformation Problem="TempTask" EventCallback="EventTaskInformation"></TaskInformation>
            }
        </div>
    </div>
</div>

<script>
    function Collapsed() {
        var element = document.getElementById("taskInformation");
        element.style.display = 'none';
    }
    function Visible() {
        var element = document.getElementById("taskInformation");
        element.style.display = 'flex';
    }
    
</script>

@code{
    public List<Problem> SortedTask;
    public Problem? TempTask = null;

    protected override void OnInitialized()
    {
        if (MauiProgram.ListProblems != null)
        {
            SortedTask = new List<Problem>();
            SortedTask.AddRange(
                MauiProgram.ListProblems.Where(t => t.Deadline < DateTime.Now && t.Status.Name == "В работе").ToList()
            );

            SortedTask.AddRange(
                MauiProgram.ListProblems.Where(t => t.Deadline < DateTime.Now && t.Status.Name == "Открыта").ToList()
            );

            SortedTask.AddRange(
                MauiProgram.ListProblems.Where(t => t.Deadline >= DateTime.Now && t.Status.Name == "В работе").ToList()
            );

            SortedTask.AddRange(
                MauiProgram.ListProblems.Where(t => t.Deadline >= DateTime.Now && t.Status.Name == "Открыта").ToList()
            );
        }
    }

    public void ResetButton(){
        OnInitialized();
    }

    public async void On(Problem task)
    {
        TempTask = task;
        await JSRuntime.InvokeVoidAsync("Visible");
    }

    public async void EventTaskInformation(string value)
    {
        if(value == "save")
        {
            await JSRuntime.InvokeVoidAsync("Collapsed");
        }
    }

}